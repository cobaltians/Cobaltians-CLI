#!/usr/bin/env node

var program = require('commander');
var config = require("./../src/config/index");
var log = require("./../src/helpers/log/index");
var Q = require('q');
var fs = require('fs-extra');
var path = require('path');

var commands = {
    platforms: []
};

program
    .parse(process.argv);

/*
 First we check that cli args are ok
 */
if (!program.args[0]) {
    log.error("You must specify an app name");
    process.exit(1);
} else {
    commands.appName = program.args[0];
}

if (!program.args[1]) {
    log.error("you must specify a template name");
    process.exit(1);
} else {
    commands.templateName = program.args[1];
}

if (program.args[2]) {
    commands.branch = program.args[2];
}

var askPlatforms = function () {
    deferred = Q.defer();
    var readlineSync = require('readline-sync');

    ios = readlineSync.question('Would you like to create an iOS app y/n  (default: y): ');
    android = readlineSync.question('Would you like to create an Android app y/n  (default: y): ');

    if (ios != 'n') commands.platforms.push('iOS');
    if (android != 'n') commands.platforms.push('Android');

    deferred.resolve();
    return deferred.promise;
};

var createPath = function (newpath) {
    deferred = Q.defer();
    try {
        log.info('creating path '+ newpath);
        fs.mkdirSync(path.normalize(newpath));
        deferred.resolve();
    } catch (e) {
        //if (e.code != 'EEXIST')
        deferred.reject("a folder already exists with the name " + newpath);
    }
    return deferred.promise;
};

var gitCloneTemplate = function (platform) {
    Git = require('simple-git')();
    deferred = Q.defer();

    gitHubUrl = config.github_samples + 'Samples-' + commands.templateName + '-' + platform + '.git';
    localPath = path.normalize(commands.appName + '/' + platform + '/' + commands.appName);
    branch = commands.branch || 'master'; //TODO doesn't work
    options = ['--recursive', '-b', branch];

    return createPath(path.normalize(commands.appName + '/' + platform))
        .then(function(){
            log.info("Cloning " + gitHubUrl + " using branch " + commands.branch);

            return Git.clone(gitHubUrl, localPath, options);
        })
        .then(function(repository) {
            log.success("repository " + gitHubUrl + " cloned");
        }, function (reasonForFailure) {
            return deferred.reject("cannot clone the repository at " + gitHubUrl + " because " + reasonForFailure);
        });
};

var renameTemplate = function (platform) {
    var rename = require('./../src/helpers/rename/index');
    deferred = Q.defer();

    log.info("making the template for " + platform);

    if (platform == 'iOS') return rename.iosProject(path.normalize(commands.appName + '/' + platform + '/' + commands.appName), commands.templateName, commands.appName);
    if (platform == 'Android') return rename.androidProject(path.normalize(commands.appName + '/' + platform + '/' + commands.appName), commands.templateName, commands.appName);

    log.success(platform + ' template is done');

    deferred.resolve();
    return deferred.promise;
};

var cobaltiansFile = function () {
    deferred = Q.defer();

    log.info("Create cobaltians file");

    fs.writeJsonSync(path.normalize(commands.appName + '/cobaltians.json'), {
        name: commands.appName,
        cobaltVersion: '0.5.0', //TODO: check how to get last cobalt version,
        platforms: commands.platforms,
        plugins: []
    });

    deferred.resolve();
    return deferred.promise;
};

askPlatforms()
    .then(function () {
        //create myApp path.
        return createPath(program.args[0]);
    })
    .then(function () {
        return commands.platforms.reduce(function (previous, job) {
            return previous.then(function () {
                return gitCloneTemplate(job);
            });
        }, Q());
    })
    .then(function () {
        return commands.platforms.reduce(function (previous, job) {
            return previous.then(function () {
                return renameTemplate(job);
            });
        }, Q());
    })
    .then(cobaltiansFile)
    .then(function () {
        log.success("Finished");
    })
    .fail(function (err) {
        log.error(err);
        process.exit(1);
    });
