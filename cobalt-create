#!/usr/bin/env node

var program = require('commander');
var config = require("./src/config");
var log = require("./src/helpers/log");
var Q = require('q');
require('q-foreach')(Q);
var fs = require('fs');
var prompt = require('prompt');

var commands = {
    platforms: ['ios', 'android']
};

program
    .parse(process.argv);

/*
 First we check that cli args are ok
 */
if (!program.args[0]) {
    log.error("Your must specify an app name");
    process.exit(1);
} else {
    commands.appName = program.args[0];
}

if (!program.args[1]) {
    log.error("your must specify a template name");
    process.exit(1);
} else {
    commands.templateName = program.args[1];
}

var askPlatforms = function () {
    deferred = Q.defer();

    prompt = require('sync-prompt').prompt;
    ios = prompt('Would you like to create an iOS app y/n  (default: y)');
    android = prompt('Would you like to create an Android app y/n  (default: y)');

    if (ios == 'n') delete commands.platforms['ios'];
    if (android == 'n') delete commands.platforms['android'];
    deferred.resolve();
    return deferred.promise;
};

var createPath = function () {
    deferred = Q.defer();
    try {
        fs.mkdirSync(program.args[0]);
        deferred.resolve();
    } catch (e) {
        //if (e.code != 'EEXIST')
        deferred.reject("a folder already exists with the name " + program.args[0]);
    }
    return deferred.promise;
};

var gitCloneCobalt = function () {
    Repository = require('git-cli').Repository;

    deferred = Q.defer();

    gitHubPath = config.gitHub + 'cobalt.git';
    log.info("cloning " + gitHubPath);

    Repository.clone(gitHubPath, commands.appName + '/' + 'cobalt_sources', function (err, repo) {
        if (err) {
            deferred.reject("cannot clone the repository at " + gitHubPath);
        } else {
            log.success("repository " + gitHubPath + " cloned");
            deferred.resolve();
        }
    });
    return deferred.promise;
};

var gitCloneTemplate = function (platform) {
    Repository = require('git-cli').Repository;

    deferred = Q.defer();

    gitHubPath = config.gitHub + 'Samples-' + commands.templateName + '-' + platform + '.git';
    log.info("cloning " + gitHubPath);

    Repository.clone(gitHubPath,
        commands.appName + '/' + platform, function (err, repo) {
            if (err) {
                deferred.reject("cannot clone the repository at " + gitHubPath);
            } else {
                log.success("repository " + gitHubPath + " cloned");
                deferred.resolve();
            }
        });

    return deferred.promise;
};

var renameTemplate = function (platform) {
    var rename = require('./src/helpers/rename');
    deferred = Q.defer();

    if (platform == 'ios') return rename.iosProject(commands.appName + '/' + platform, commands.templateName, commands.appName);
    deferred.resolve();
    return deferred.promise;
};

var promises = [];

askPlatforms()
    .then(createPath)
    .then(gitCloneCobalt)
    .then(function () {
        return commands.platforms.reduce(function (previous, job) {
            return previous.then(function () {
                return gitCloneTemplate(job);
            });
        }, Q());
    })
    .then(function(){
        return commands.platforms.reduce(function (previous, job) {
            return previous.then(function () {
                return renameTemplate(job);
            });
        }, Q());
    })
    .then(function(){
        log.success("Finished");
    })
    .fail(function (err) {
        log.error(err);
        process.exit(1);
    });