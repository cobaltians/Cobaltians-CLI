#!/usr/bin/env node

var program = require('commander');
var config = require("./src/config");
var log = require("./src/helpers/log");
var Q = require('q');
var fs = require('fs-extra');
var path = require('path');

var commands = {
    platforms: []
};

program
    .parse(process.argv);

/*
 First we check that cli args are ok
 */
if (!program.args[0]) {
    log.error("Your must specify an app name");
    process.exit(1);
} else {
    commands.appName = program.args[0];
}

if (!program.args[1]) {
    log.error("your must specify a template name");
    process.exit(1);
} else {
    commands.templateName = program.args[1];
}

var askPlatforms = function () {
    deferred = Q.defer();
    var readlineSync = require('readline-sync');

    ios = readlineSync.question('Would you like to create an iOS app y/n  (default: y): ');
    android = readlineSync.question('Would you like to create an Android app y/n  (default: y): ');

    if (ios != 'n') commands.platforms.push('ios');
    if (android != 'n') commands.platforms.push('android');

    deferred.resolve();
    return deferred.promise;
};

var createPath = function () {
    deferred = Q.defer();
    try {
        fs.mkdirSync(path.normalize(program.args[0]));
        deferred.resolve();
    } catch (e) {
        //if (e.code != 'EEXIST')
        deferred.reject("a folder already exists with the name " + program.args[0]);
    }
    return deferred.promise;
};

var gitCloneCobalt = function () {
    Repository = require('git-cli').Repository;

    deferred = Q.defer();

    gitHubPath = config.gitHub + 'cobalt.git';
    log.info("cloning " + gitHubPath);

    Repository.clone(gitHubPath,
        path.normalize(commands.appName + '/' + 'cobalt_sources'), function (err, repo) {
            if (err) {
                deferred.reject("cannot clone the repository at " + gitHubPath);
            } else {
                log.success("repository " + gitHubPath + " cloned");
                deferred.resolve();
            }
        });
    return deferred.promise;
};

var gitCloneTemplate = function (platform) {
    Repository = require('git-cli').Repository;

    deferred = Q.defer();

    gitHubPath = config.gitHub + 'Samples-' + commands.templateName + '-' + platform + '.git';
    log.info("cloning " + gitHubPath);

    Repository.clone(gitHubPath,
        path.normalize(commands.appName + '/' + platform), function (err, repo) {
            if (err) {
                deferred.reject("cannot clone the repository at " + gitHubPath);
            } else {
                log.success("repository " + gitHubPath + " cloned");
                deferred.resolve();
            }
        });

    return deferred.promise;
};

var renameTemplate = function (platform) {
    var rename = require('./src/helpers/rename');
    deferred = Q.defer();

    log.info("making the template for " + platform);

    if (platform == 'ios') return rename.iosProject(path.normalize(commands.appName + '/' + platform), commands.templateName, commands.appName);
    if (platform == 'android') return rename.androidProject(path.normalize(commands.appName + '/' + platform), commands.templateName, commands.appName);

    log.success(platform + ' template is done');

    deferred.resolve();
    return deferred.promise;
};

var removeSources = function () {
    deferred = Q.defer();

    log.info("Cleaning installation");

    fs.removeSync(path.normalize(commands.appName + '/cobalt_sources'));

    deferred.resolve();
    return deferred.promise;
};

askPlatforms()
    .then(createPath)
    .then(gitCloneCobalt)
    .then(function () {
        return commands.platforms.reduce(function (previous, job) {
            return previous.then(function () {
                return gitCloneTemplate(job);
            });
        }, Q());
    })
    .then(function () {
        return commands.platforms.reduce(function (previous, job) {
            return previous.then(function () {
                return renameTemplate(job);
            });
        }, Q());
    })
    .then(removeSources)
    .then(function () {
        log.success("Finished");
    })
    .fail(function (err) {
        log.error(err);
        process.exit(1);
    });